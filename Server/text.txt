

exports.submitAnswers = async (req, res) => {
    try {
        const { answers } = req.body; // Get answers from the request body
        const latestQuiz = await Quiz.findOne().sort({ createdAt: -1 }); // Get the latest quiz

        if (!latestQuiz) {
            return res.status(404).json({ message: 'No quizzes found' });
        }

        const quizId = latestQuiz._id; // Get quizId from the latest quiz

        // Validate the input
        if (!answers) {
            return res.status(400).json({ message: 'Answers are required' });
        }

        // Prepare the answer payload for the AI model
        const answerPayload = {
            question: latestQuiz.questions, // Use questions from the latest quiz
            response: answers // Pass user-selected answers
        };

        // Call the recommendations logic
        const recommendations = await getRecommendations(answerPayload); // Fetch recommendations

        // Store recommendations in the database
        const recommendationDoc = new Recommendation({
            quizId,
            recommendedFields: recommendations.recommended_fields // Adjust based on the format of the response
        });

        await recommendationDoc.save(); // Save the recommendations

        return res.status(200).json({
            message: 'Answers submitted successfully',
            recommendations: recommendations.recommended_fields, // Include recommendations in the response
        });
    } catch (err) {
        return res.status(500).json({ message: 'Error submitting answers', error: err.message });
    }
};

// Function to get recommendations from the Python model
async function getRecommendations(answerPayload) {
    return new Promise((resolve, reject) => {
        let pyshell = new PythonShell('./main.py');

        // Construct the prompt based on the input structure you provided
        const prompt = {
            answer: `(Give me recommendations based on this quiz) {\"question\": ${JSON.stringify(answerPayload.question)}, \"response\": ${JSON.stringify(answerPayload.response)}}. Based on this, recommend fields of interest for me in a structured JSON format. Do not give any traits just array of objects named as recommended_fields inside of it the field. No description required keep this names same always. Give me the overall recommendation based on the quiz do not go question wise recommendation field.`
        };

        // Send the answer payload to the Python script
        pyshell.send(JSON.stringify(prompt));

        pyshell.on('message', function (message) {
            try {
                const recommendations = JSON.parse(message);
                resolve(recommendations);
            } catch (err) {
                reject(new Error("Failed to parse recommendations from Python."));
            }
        });

        // Handle errors in executing the Python script
        pyshell.end((err) => {
            if (err) {
                reject(new Error('Error executing Python script: ' + err.message));
            }
        });
    });
}


exports.getRecommendationsByQuizId = async (req, res) => {
    try {
        const { quizId } = req.params; // Get quizId from the request parameters
        const recommendations = await Recommendation.findOne({ quizId });

        if (!recommendations) {
            return res.status(404).json({ message: 'No recommendations found for this quiz' });
        }

        return res.status(200).json(recommendations);
    } catch (err) {
        return res.status(500).json({ message: 'Error fetching recommendations', error: err.message });
    }
};










{
    "answers": {
        "1": "A",
        "2": "B",
        "3": "C",
        "4": "D",
        "5": "A"
    }
}





source venv/bin/activate










{
  question: [
    {
      options: [Object],
      number: 1,
      text: 'What type of activities do you usually enjoy doing in your free time?',
      _id: new ObjectId('67108b411fb6f0bb9bfde22d')
    },
    {
      options: [Object],
      number: 2,
      text: 'Which genre of books or movies interests you the most?',
      _id: new ObjectId('67108b411fb6f0bb9bfde22e')
    },
    {
      options: [Object],
      number: 3,
      text: 'How do you prefer to spend your weekends?',
      _id: new ObjectId('67108b411fb6f0bb9bfde22f')
    },
    {
      options: [Object],
      number: 4,
      text: 'What motivates you to learn something new?',
      _id: new ObjectId('67108b411fb6f0bb9bfde230')
    },
    {
      options: [Object],
      number: 5,
      text: 'How important is technology in your daily life?',
      _id: new ObjectId('67108b411fb6f0bb9bfde231')
    }
  ],
  response: { '1': 'D', '2': 'B', '3': 'B', '4': 'D', '5': 'A' }
}
